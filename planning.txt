

How should the API feel?

First how are we generating the data?

    1) Dynamics First
        i)   define dynamics given by f(X)
        ii)  solve_ivp w/ interpolation to get X
        iii) apply f -> X to get X_dot

        inputs:
            - t0
            - tf
            - step 
            - f 
            - initial_conditions

        outputs:
            - X, X_dot (Tensors)


    2) Data First
        i)  given X from measurements or external source
        ii) numerically differentiate using one of:
            a) finite difference
            b) others
        to obtain -> X_dot

        inputs:
        outputs:
        TODO

It will definitiely be nice to dedicate a module to some systems of interest
usage:

    import sindy_data
    from dynamics import lorenz_dynamics, SHO_dynamics, simple_pendulum_dynamics

    lorenz = sindy_data.generate_system_from_dynamics(
        lorenz_dynamics, 
        init_conditions=(0, 1, 1.05),
        t0 = 0
        tf = 20
        steps = 10000
    )

    print(lorenz.ode())
    lorenz.plot()
    X, X_dot = lorenz.training_data()

    # need a good way to add noise.

------------------------------------------------------------------------------------------

Now how do we go backward. How do we learn the dynamics from the data?

usage:
    from sindy_algorithms import STLSQ, SR3
    from sindy import SINDy, SINDy_LSQ
    from sindy_libs import PolynomialLibrary, TrigLibrary

    model = SINDy_LSQ(
        libs=[
            PolynomialLibrary(max_degree=1)
            TrigLibrary()
        ],
        feature_names=['x','y','z'],
        algo=STLSQ(threshold = 0.1)
    )
    
    model.fit(X, X_dot)
    model.dynamics() 

    model = SINDy(
        input_dim=X.size(),
        libs=[
            PolynomialLibrary(max_degree=1)
            TrigLibrary()
        ],
        feature_names=['x','y','z']
    )

--------------------------------------------------------------------------

How do we precisely define the Autoencoder SINDy problem? 

Let's restrict this to the the first order phase portrait representation.
Suppose we have the following assumptions:
    1) Z in R^n is a time-series tensor in coordinates corresponding 
       to a dynamical system Z_dot = f(Z) such that f ~ theta(Z)
        is as sparse as possible.
    2) T: R^n -> R^m, m >= n
       is an injective mapping (not necessarily linear) mapping Z
       to obfuscated state space X in R^m. In general we expect m >> n.


Problem Statement:
    
Given X = T(Z) in R^m, find a mapping phi ~= T^-1
such that Z* = phi(X) satisfies a dynamical system Z_dot* = f*(Z*) for 
some f* with sparsity and error as close as possible to that of
the original equation Z_dot = f(Z) 

So really I think this is all about finding the right phi. It's relatively
trivial to find the weights Xi given the right intrinsic coordinate Z*.

As it stands the current method just descends to the optimal phi and f*
simultaneously. Find the autoencoder weights and SINDy weights together. 

We'll code this up as quickly as possible and analyze the results empirically.

Network Architecture______________________________________________________

loss:
    loss_fn = recon + sindy_z + sindy_x + reg

            = |X - X_recon| + |Z_dot - f_Z| + |X_dot - f_X| + |Xi|

            = |X - psi(phi(X))|
            + |grad_X phi(X) @ X_dot - theta(Z) @ Xi|
            + |X_dot - grad_Z psi(Z) @ f_Z|
            + |Xi| 

forward(X,X_dot):
    Z = encoder(X)
    X_recon = decoder(Z)
    Z_dot = get_Z_dot(X, X_dot)
    f_Z = sindy(theta(Z))
    f_X = get_f_X(Z, f_Z)
    return X_recon, Z_dot, f_Z, f_X, Xi

training loop:

    for epoch in range(epochs):

        for X, X_dot in dataloader:

            X = X.to(device)
            X_dot = X_dot.to(device)

            X_recon, Z_dot, f_Z, f_X, Xi = model(X, X_dot)
            loss = loss_fn(X_recon, Z_dot, f_Z, f_X, Xi)

            optimizer.zero_grad()
            loss.backwards()
            optimizer.step()

            if epoch % 1000 == 0:
                print(loss)

    model.show()



    
    




    












